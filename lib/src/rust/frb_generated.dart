// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/facet.dart';
import 'api/schema.dart';
import 'api/schemabuilder.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => -597705704;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'tantivy_dart',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Facet crateApiFacetFacetFromString({required String facetString});

  bool crateApiFacetFacetIsPrefixOf({
    required Facet that,
    required Facet other,
  });

  bool crateApiFacetFacetIsRoot({required Facet that});

  Facet crateApiFacetFacetRoot();

  List<String> crateApiFacetFacetToPath({required Facet that});

  String crateApiFacetFacetToPathStr({required Facet that});

  SchemaBuilder crateApiSchemabuilderSchemaBuilderAddBooleanField({
    required SchemaBuilder that,
    required String name,
    required bool stored,
    required bool indexed,
    required bool fast,
  });

  SchemaBuilder crateApiSchemabuilderSchemaBuilderAddBytesField({
    required SchemaBuilder that,
    required String name,
    required bool stored,
    required bool indexed,
    required bool fast,
  });

  SchemaBuilder crateApiSchemabuilderSchemaBuilderAddDateField({
    required SchemaBuilder that,
    required String name,
    required bool stored,
    required bool indexed,
    required bool fast,
  });

  SchemaBuilder crateApiSchemabuilderSchemaBuilderAddFacetField({
    required SchemaBuilder that,
    required String name,
  });

  SchemaBuilder crateApiSchemabuilderSchemaBuilderAddFloatField({
    required SchemaBuilder that,
    required String name,
    required bool stored,
    required bool indexed,
    required bool fast,
  });

  SchemaBuilder crateApiSchemabuilderSchemaBuilderAddIntegerField({
    required SchemaBuilder that,
    required String name,
    required bool stored,
    required bool indexed,
    required bool fast,
  });

  SchemaBuilder crateApiSchemabuilderSchemaBuilderAddIpAddrField({
    required SchemaBuilder that,
    required String name,
    required bool stored,
    required bool indexed,
    required bool fast,
  });

  SchemaBuilder crateApiSchemabuilderSchemaBuilderAddJsonField({
    required SchemaBuilder that,
    required String name,
    required bool stored,
    required bool fast,
    required String tokenizerName,
    required String indexOption,
  });

  SchemaBuilder crateApiSchemabuilderSchemaBuilderAddTextField({
    required SchemaBuilder that,
    required String name,
    required bool stored,
    required bool fast,
    required String tokenizerName,
    required String indexOption,
  });

  SchemaBuilder crateApiSchemabuilderSchemaBuilderAddUnsignedField({
    required SchemaBuilder that,
    required String name,
    required bool stored,
    required bool indexed,
    required bool fast,
  });

  Schema crateApiSchemabuilderSchemaBuilderBuild({required SchemaBuilder that});

  bool crateApiSchemabuilderSchemaBuilderIsValidFieldName({
    required String name,
  });

  SchemaBuilder crateApiSchemabuilderSchemaBuilderNew();

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Facet;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Facet;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FacetPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Schema;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Schema;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SchemaPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SchemaBuilder;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SchemaBuilder;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_SchemaBuilderPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_TantivyError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_TantivyError;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_TantivyErrorPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Facet crateApiFacetFacetFromString({required String facetString}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(facetString, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFacet,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiFacetFacetFromStringConstMeta,
        argValues: [facetString],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFacetFacetFromStringConstMeta =>
      const TaskConstMeta(
        debugName: "Facet_from_string",
        argNames: ["facetString"],
      );

  @override
  bool crateApiFacetFacetIsPrefixOf({
    required Facet that,
    required Facet other,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFacet(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFacet(
            other,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiFacetFacetIsPrefixOfConstMeta,
        argValues: [that, other],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFacetFacetIsPrefixOfConstMeta =>
      const TaskConstMeta(
        debugName: "Facet_is_prefix_of",
        argNames: ["that", "other"],
      );

  @override
  bool crateApiFacetFacetIsRoot({required Facet that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFacet(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiFacetFacetIsRootConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFacetFacetIsRootConstMeta =>
      const TaskConstMeta(debugName: "Facet_is_root", argNames: ["that"]);

  @override
  Facet crateApiFacetFacetRoot() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFacet,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiFacetFacetRootConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFacetFacetRootConstMeta =>
      const TaskConstMeta(debugName: "Facet_root", argNames: []);

  @override
  List<String> crateApiFacetFacetToPath({required Facet that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFacet(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiFacetFacetToPathConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFacetFacetToPathConstMeta =>
      const TaskConstMeta(debugName: "Facet_to_path", argNames: ["that"]);

  @override
  String crateApiFacetFacetToPathStr({required Facet that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFacet(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiFacetFacetToPathStrConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFacetFacetToPathStrConstMeta =>
      const TaskConstMeta(debugName: "Facet_to_path_str", argNames: ["that"]);

  @override
  SchemaBuilder crateApiSchemabuilderSchemaBuilderAddBooleanField({
    required SchemaBuilder that,
    required String name,
    required bool stored,
    required bool indexed,
    required bool fast,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder(
            that,
            serializer,
          );
          sse_encode_String(name, serializer);
          sse_encode_bool(stored, serializer);
          sse_encode_bool(indexed, serializer);
          sse_encode_bool(fast, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyError,
        ),
        constMeta: kCrateApiSchemabuilderSchemaBuilderAddBooleanFieldConstMeta,
        argValues: [that, name, stored, indexed, fast],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSchemabuilderSchemaBuilderAddBooleanFieldConstMeta =>
      const TaskConstMeta(
        debugName: "SchemaBuilder_add_boolean_field",
        argNames: ["that", "name", "stored", "indexed", "fast"],
      );

  @override
  SchemaBuilder crateApiSchemabuilderSchemaBuilderAddBytesField({
    required SchemaBuilder that,
    required String name,
    required bool stored,
    required bool indexed,
    required bool fast,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder(
            that,
            serializer,
          );
          sse_encode_String(name, serializer);
          sse_encode_bool(stored, serializer);
          sse_encode_bool(indexed, serializer);
          sse_encode_bool(fast, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyError,
        ),
        constMeta: kCrateApiSchemabuilderSchemaBuilderAddBytesFieldConstMeta,
        argValues: [that, name, stored, indexed, fast],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSchemabuilderSchemaBuilderAddBytesFieldConstMeta =>
      const TaskConstMeta(
        debugName: "SchemaBuilder_add_bytes_field",
        argNames: ["that", "name", "stored", "indexed", "fast"],
      );

  @override
  SchemaBuilder crateApiSchemabuilderSchemaBuilderAddDateField({
    required SchemaBuilder that,
    required String name,
    required bool stored,
    required bool indexed,
    required bool fast,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder(
            that,
            serializer,
          );
          sse_encode_String(name, serializer);
          sse_encode_bool(stored, serializer);
          sse_encode_bool(indexed, serializer);
          sse_encode_bool(fast, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyError,
        ),
        constMeta: kCrateApiSchemabuilderSchemaBuilderAddDateFieldConstMeta,
        argValues: [that, name, stored, indexed, fast],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSchemabuilderSchemaBuilderAddDateFieldConstMeta =>
      const TaskConstMeta(
        debugName: "SchemaBuilder_add_date_field",
        argNames: ["that", "name", "stored", "indexed", "fast"],
      );

  @override
  SchemaBuilder crateApiSchemabuilderSchemaBuilderAddFacetField({
    required SchemaBuilder that,
    required String name,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder(
            that,
            serializer,
          );
          sse_encode_String(name, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyError,
        ),
        constMeta: kCrateApiSchemabuilderSchemaBuilderAddFacetFieldConstMeta,
        argValues: [that, name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSchemabuilderSchemaBuilderAddFacetFieldConstMeta =>
      const TaskConstMeta(
        debugName: "SchemaBuilder_add_facet_field",
        argNames: ["that", "name"],
      );

  @override
  SchemaBuilder crateApiSchemabuilderSchemaBuilderAddFloatField({
    required SchemaBuilder that,
    required String name,
    required bool stored,
    required bool indexed,
    required bool fast,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder(
            that,
            serializer,
          );
          sse_encode_String(name, serializer);
          sse_encode_bool(stored, serializer);
          sse_encode_bool(indexed, serializer);
          sse_encode_bool(fast, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyError,
        ),
        constMeta: kCrateApiSchemabuilderSchemaBuilderAddFloatFieldConstMeta,
        argValues: [that, name, stored, indexed, fast],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSchemabuilderSchemaBuilderAddFloatFieldConstMeta =>
      const TaskConstMeta(
        debugName: "SchemaBuilder_add_float_field",
        argNames: ["that", "name", "stored", "indexed", "fast"],
      );

  @override
  SchemaBuilder crateApiSchemabuilderSchemaBuilderAddIntegerField({
    required SchemaBuilder that,
    required String name,
    required bool stored,
    required bool indexed,
    required bool fast,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder(
            that,
            serializer,
          );
          sse_encode_String(name, serializer);
          sse_encode_bool(stored, serializer);
          sse_encode_bool(indexed, serializer);
          sse_encode_bool(fast, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyError,
        ),
        constMeta: kCrateApiSchemabuilderSchemaBuilderAddIntegerFieldConstMeta,
        argValues: [that, name, stored, indexed, fast],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSchemabuilderSchemaBuilderAddIntegerFieldConstMeta =>
      const TaskConstMeta(
        debugName: "SchemaBuilder_add_integer_field",
        argNames: ["that", "name", "stored", "indexed", "fast"],
      );

  @override
  SchemaBuilder crateApiSchemabuilderSchemaBuilderAddIpAddrField({
    required SchemaBuilder that,
    required String name,
    required bool stored,
    required bool indexed,
    required bool fast,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder(
            that,
            serializer,
          );
          sse_encode_String(name, serializer);
          sse_encode_bool(stored, serializer);
          sse_encode_bool(indexed, serializer);
          sse_encode_bool(fast, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyError,
        ),
        constMeta: kCrateApiSchemabuilderSchemaBuilderAddIpAddrFieldConstMeta,
        argValues: [that, name, stored, indexed, fast],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSchemabuilderSchemaBuilderAddIpAddrFieldConstMeta =>
      const TaskConstMeta(
        debugName: "SchemaBuilder_add_ip_addr_field",
        argNames: ["that", "name", "stored", "indexed", "fast"],
      );

  @override
  SchemaBuilder crateApiSchemabuilderSchemaBuilderAddJsonField({
    required SchemaBuilder that,
    required String name,
    required bool stored,
    required bool fast,
    required String tokenizerName,
    required String indexOption,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder(
            that,
            serializer,
          );
          sse_encode_String(name, serializer);
          sse_encode_bool(stored, serializer);
          sse_encode_bool(fast, serializer);
          sse_encode_String(tokenizerName, serializer);
          sse_encode_String(indexOption, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyError,
        ),
        constMeta: kCrateApiSchemabuilderSchemaBuilderAddJsonFieldConstMeta,
        argValues: [that, name, stored, fast, tokenizerName, indexOption],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSchemabuilderSchemaBuilderAddJsonFieldConstMeta =>
      const TaskConstMeta(
        debugName: "SchemaBuilder_add_json_field",
        argNames: [
          "that",
          "name",
          "stored",
          "fast",
          "tokenizerName",
          "indexOption",
        ],
      );

  @override
  SchemaBuilder crateApiSchemabuilderSchemaBuilderAddTextField({
    required SchemaBuilder that,
    required String name,
    required bool stored,
    required bool fast,
    required String tokenizerName,
    required String indexOption,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder(
            that,
            serializer,
          );
          sse_encode_String(name, serializer);
          sse_encode_bool(stored, serializer);
          sse_encode_bool(fast, serializer);
          sse_encode_String(tokenizerName, serializer);
          sse_encode_String(indexOption, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyError,
        ),
        constMeta: kCrateApiSchemabuilderSchemaBuilderAddTextFieldConstMeta,
        argValues: [that, name, stored, fast, tokenizerName, indexOption],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSchemabuilderSchemaBuilderAddTextFieldConstMeta =>
      const TaskConstMeta(
        debugName: "SchemaBuilder_add_text_field",
        argNames: [
          "that",
          "name",
          "stored",
          "fast",
          "tokenizerName",
          "indexOption",
        ],
      );

  @override
  SchemaBuilder crateApiSchemabuilderSchemaBuilderAddUnsignedField({
    required SchemaBuilder that,
    required String name,
    required bool stored,
    required bool indexed,
    required bool fast,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder(
            that,
            serializer,
          );
          sse_encode_String(name, serializer);
          sse_encode_bool(stored, serializer);
          sse_encode_bool(indexed, serializer);
          sse_encode_bool(fast, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyError,
        ),
        constMeta: kCrateApiSchemabuilderSchemaBuilderAddUnsignedFieldConstMeta,
        argValues: [that, name, stored, indexed, fast],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSchemabuilderSchemaBuilderAddUnsignedFieldConstMeta =>
      const TaskConstMeta(
        debugName: "SchemaBuilder_add_unsigned_field",
        argNames: ["that", "name", "stored", "indexed", "fast"],
      );

  @override
  Schema crateApiSchemabuilderSchemaBuilderBuild({
    required SchemaBuilder that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchema,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyError,
        ),
        constMeta: kCrateApiSchemabuilderSchemaBuilderBuildConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSchemabuilderSchemaBuilderBuildConstMeta =>
      const TaskConstMeta(debugName: "SchemaBuilder_build", argNames: ["that"]);

  @override
  bool crateApiSchemabuilderSchemaBuilderIsValidFieldName({
    required String name,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(name, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSchemabuilderSchemaBuilderIsValidFieldNameConstMeta,
        argValues: [name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSchemabuilderSchemaBuilderIsValidFieldNameConstMeta =>
      const TaskConstMeta(
        debugName: "SchemaBuilder_is_valid_field_name",
        argNames: ["name"],
      );

  @override
  SchemaBuilder crateApiSchemabuilderSchemaBuilderNew() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSchemabuilderSchemaBuilderNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSchemabuilderSchemaBuilderNewConstMeta =>
      const TaskConstMeta(debugName: "SchemaBuilder_new", argNames: []);

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Facet =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFacet;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Facet =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFacet;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Schema =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchema;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Schema =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchema;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SchemaBuilder =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SchemaBuilder =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_TantivyError =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_TantivyError =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyError;

  @protected
  Facet
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFacet(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FacetImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Schema
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchema(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SchemaImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SchemaBuilder
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SchemaBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TantivyError
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TantivyErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SchemaBuilder
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SchemaBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Facet
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFacet(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FacetImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Facet
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFacet(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FacetImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Schema
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchema(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SchemaImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SchemaBuilder
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SchemaBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TantivyError
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TantivyErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  Facet
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFacet(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FacetImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Schema
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchema(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SchemaImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SchemaBuilder
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SchemaBuilderImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  TantivyError
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TantivyErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SchemaBuilder
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SchemaBuilderImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Facet
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFacet(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FacetImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Facet
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFacet(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FacetImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Schema
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchema(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SchemaImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SchemaBuilder
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SchemaBuilderImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  TantivyError
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TantivyErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFacet(
    Facet self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FacetImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchema(
    Schema self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SchemaImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder(
    SchemaBuilder self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SchemaBuilderImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyError(
    TantivyError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as TantivyErrorImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder(
    SchemaBuilder self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SchemaBuilderImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFacet(
    Facet self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FacetImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFacet(
    Facet self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FacetImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchema(
    Schema self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SchemaImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchemaBuilder(
    SchemaBuilder self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SchemaBuilderImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyError(
    TantivyError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as TantivyErrorImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}

@sealed
class FacetImpl extends RustOpaque implements Facet {
  // Not to be used by end users
  FacetImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FacetImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Facet,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Facet,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FacetPtr,
  );

  /// Returns true if another Facet is a subfacet of this facet.
  ///
  /// Args:
  ///     other (Facet): The Facet that we should check if this facet is a
  ///         subset of.
  bool isPrefixOf({required Facet other}) => RustLib.instance.api
      .crateApiFacetFacetIsPrefixOf(that: this, other: other);

  /// Returns true if the facet is the root facet /.
  bool isRoot() => RustLib.instance.api.crateApiFacetFacetIsRoot(that: this);

  /// Returns the list of `segments` that forms a facet path.
  ///
  /// For instance `//europe/france` becomes `["europe", "france"]`.
  List<String> toPath() =>
      RustLib.instance.api.crateApiFacetFacetToPath(that: this);

  /// Returns the facet string representation.
  String toPathStr() =>
      RustLib.instance.api.crateApiFacetFacetToPathStr(that: this);
}

@sealed
class SchemaBuilderImpl extends RustOpaque implements SchemaBuilder {
  // Not to be used by end users
  SchemaBuilderImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SchemaBuilderImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SchemaBuilder,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SchemaBuilder,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SchemaBuilderPtr,
  );

  /// Add a new boolean field to the schema.
  ///
  /// Args:
  ///     name (str): The name of the field.
  ///     stored (bool, optional): If true sets the field as stored, the
  ///         content of the field can be later restored from a Searcher.
  ///         Defaults to False.
  ///     indexed (bool, optional): If true sets the field to be indexed.
  ///     fast (bool, optional): Set the numeric options as a fast field. A
  ///         fast field is a column-oriented fashion storage for tantivy.
  ///         It is designed for the fast random access of some document
  ///         fields given a document id.
  ///
  /// Returns the associated field handle.
  /// Raises a ValueError if there was an error with the field creation.
  SchemaBuilder addBooleanField({
    required String name,
    required bool stored,
    required bool indexed,
    required bool fast,
  }) => RustLib.instance.api.crateApiSchemabuilderSchemaBuilderAddBooleanField(
    that: this,
    name: name,
    stored: stored,
    indexed: indexed,
    fast: fast,
  );

  /// Add a fast bytes field to the schema.
  ///
  /// Args:
  ///     name (str): The name of the field.
  ///     stored (bool, optional): If true sets the field as stored, the
  ///         content of the field can be later restored from a Searcher.
  ///         Defaults to False.
  ///     indexed (bool, optional): If true sets the field to be indexed.
  ///     fast (bool, optional): Set the bytes options as a fast field. A fast
  ///         field is a column-oriented fashion storage for tantivy. It is
  ///         designed for the fast random access of some document fields
  ///         given a document id.
  SchemaBuilder addBytesField({
    required String name,
    required bool stored,
    required bool indexed,
    required bool fast,
  }) => RustLib.instance.api.crateApiSchemabuilderSchemaBuilderAddBytesField(
    that: this,
    name: name,
    stored: stored,
    indexed: indexed,
    fast: fast,
  );

  /// Add a new date field to the schema.
  ///
  /// Args:
  ///     name (str): The name of the field.
  ///     stored (bool, optional): If true sets the field as stored, the
  ///         content of the field can be later restored from a Searcher.
  ///         Defaults to False.
  ///     indexed (bool, optional): If true sets the field to be indexed.
  ///     fast (bool, optional): Set the date options as a fast field. A fast
  ///         field is a column-oriented fashion storage for tantivy. It is
  ///         designed for the fast random access of some document fields
  ///         given a document id.
  ///
  /// Returns the associated field handle.
  /// Raises a ValueError if there was an error with the field creation.
  SchemaBuilder addDateField({
    required String name,
    required bool stored,
    required bool indexed,
    required bool fast,
  }) => RustLib.instance.api.crateApiSchemabuilderSchemaBuilderAddDateField(
    that: this,
    name: name,
    stored: stored,
    indexed: indexed,
    fast: fast,
  );

  /// Add a Facet field to the schema.
  /// Args:
  ///     name (str): The name of the field.
  SchemaBuilder addFacetField({required String name}) => RustLib.instance.api
      .crateApiSchemabuilderSchemaBuilderAddFacetField(that: this, name: name);

  /// Add a new float field to the schema.
  ///
  /// Args:
  ///     name (str): The name of the field.
  ///     stored (bool, optional): If true sets the field as stored, the
  ///         content of the field can be later restored from a Searcher.
  ///         Defaults to False.
  ///     indexed (bool, optional): If true sets the field to be indexed.
  ///     fast (bool, optional): Set the numeric options as a fast field. A
  ///         fast field is a column-oriented fashion storage for tantivy.
  ///         It is designed for the fast random access of some document
  ///         fields given a document id.
  ///
  /// Returns the associated field handle.
  /// Raises a ValueError if there was an error with the field creation.
  SchemaBuilder addFloatField({
    required String name,
    required bool stored,
    required bool indexed,
    required bool fast,
  }) => RustLib.instance.api.crateApiSchemabuilderSchemaBuilderAddFloatField(
    that: this,
    name: name,
    stored: stored,
    indexed: indexed,
    fast: fast,
  );

  /// Add a new signed integer field to the schema.
  ///
  /// Args:
  ///     name (str): The name of the field.
  ///     stored (bool, optional): If true sets the field as stored, the
  ///         content of the field can be later restored from a Searcher.
  ///         Defaults to False.
  ///     indexed (bool, optional): If true sets the field to be indexed.
  ///     fast (bool, optional): Set the numeric options as a fast field. A
  ///         fast field is a column-oriented fashion storage for tantivy.
  ///         It is designed for the fast random access of some document
  ///         fields given a document id.
  ///
  /// Returns the associated field handle.
  /// Raises a ValueError if there was an error with the field creation.
  SchemaBuilder addIntegerField({
    required String name,
    required bool stored,
    required bool indexed,
    required bool fast,
  }) => RustLib.instance.api.crateApiSchemabuilderSchemaBuilderAddIntegerField(
    that: this,
    name: name,
    stored: stored,
    indexed: indexed,
    fast: fast,
  );

  /// Add an IP address field to the schema.
  ///
  /// Args:
  ///     name (str): The name of the field.
  ///     stored (bool, optional): If true sets the field as stored, the
  ///         content of the field can be later restored from a Searcher.
  ///         Defaults to False.
  ///     indexed (bool, optional): If true sets the field to be indexed.
  ///     fast (bool, optional): Set the IP address options as a fast field. A
  ///         fast field is a column-oriented fashion storage for tantivy. It
  ///         is designed for the fast random access of some document fields
  ///         given a document id.
  SchemaBuilder addIpAddrField({
    required String name,
    required bool stored,
    required bool indexed,
    required bool fast,
  }) => RustLib.instance.api.crateApiSchemabuilderSchemaBuilderAddIpAddrField(
    that: this,
    name: name,
    stored: stored,
    indexed: indexed,
    fast: fast,
  );

  /// Add a new json field to the schema.
  ///
  /// Args:
  ///     name (str): the name of the field.
  ///     stored (bool, optional): If true sets the field as stored, the
  ///         content of the field can be later restored from a Searcher.
  ///         Defaults to False.
  ///     fast (bool, optional): Set the text options as a fast field. A
  ///         fast field is a column-oriented fashion storage for tantivy.
  ///         Text fast fields will have the term ids stored in the fast
  ///         field. The fast field will be a multivalued fast field.
  ///         It is recommended to use the "raw" tokenizer, since it will
  ///         store the original text unchanged. The "default" tokenizer will
  ///         store the terms as lower case and this will be reflected in the
  ///         dictionary.
  ///     tokenizer_name (str, optional): The name of the tokenizer that
  ///         should be used to process the field. Defaults to 'default'
  ///     index_option (str, optional): Sets which information should be
  ///         indexed with the tokens. Can be one of 'position', 'freq' or
  ///         'basic'. Defaults to 'position'. The 'basic' index_option
  ///         records only the document ID, the 'freq' option records the
  ///         document id and the term frequency, while the 'position' option
  ///         records the document id, term frequency and the positions of
  ///         the term occurrences in the document.
  ///
  /// Returns the associated field handle.
  /// Raises a ValueError if there was an error with the field creation.
  SchemaBuilder addJsonField({
    required String name,
    required bool stored,
    required bool fast,
    required String tokenizerName,
    required String indexOption,
  }) => RustLib.instance.api.crateApiSchemabuilderSchemaBuilderAddJsonField(
    that: this,
    name: name,
    stored: stored,
    fast: fast,
    tokenizerName: tokenizerName,
    indexOption: indexOption,
  );

  /// Add a new text field to the schema.
  ///
  /// Args:
  ///     name (str): The name of the field.
  ///     stored (bool, optional): If true sets the field as stored, the
  ///         content of the field can be later restored from a Searcher.
  ///         Defaults to False.
  ///     fast (bool, optional): Set the text options as a fast field. A
  ///         fast field is a column-oriented fashion storage for tantivy.
  ///         Text fast fields will have the term ids stored in the fast
  ///         field. The fast field will be a multivalued fast field.
  ///         It is recommended to use the "raw" tokenizer, since it will
  ///         store the original text unchanged. The "default" tokenizer will
  ///         store the terms as lower case and this will be reflected in the
  ///         dictionary.
  ///     tokenizer_name (str, optional): The name of the tokenizer that
  ///         should be used to process the field. Defaults to 'default'
  ///     index_option (str, optional): Sets which information should be
  ///         indexed with the tokens. Can be one of 'position', 'freq' or
  ///         'basic'. Defaults to 'position'. The 'basic' index_option
  ///         records only the document ID, the 'freq' option records the
  ///         document id and the term frequency, while the 'position' option
  ///         records the document id, term frequency and the positions of
  ///         the term occurrences in the document.
  ///
  /// Returns the associated field handle.
  /// Raises a ValueError if there was an error with the field creation.
  SchemaBuilder addTextField({
    required String name,
    required bool stored,
    required bool fast,
    required String tokenizerName,
    required String indexOption,
  }) => RustLib.instance.api.crateApiSchemabuilderSchemaBuilderAddTextField(
    that: this,
    name: name,
    stored: stored,
    fast: fast,
    tokenizerName: tokenizerName,
    indexOption: indexOption,
  );

  /// Add a new unsigned integer field to the schema.
  ///
  /// Args:
  ///     name (str): The name of the field.
  ///     stored (bool, optional): If true sets the field as stored, the
  ///         content of the field can be later restored from a Searcher.
  ///         Defaults to False.
  ///     indexed (bool, optional): If true sets the field to be indexed.
  ///     fast (bool, optional): Set the numeric options as a fast field. A
  ///         fast field is a column-oriented fashion storage for tantivy.
  ///         It is designed for the fast random access of some document
  ///         fields given a document id.
  ///
  /// Returns the associated field handle.
  /// Raises a ValueError if there was an error with the field creation.
  SchemaBuilder addUnsignedField({
    required String name,
    required bool stored,
    required bool indexed,
    required bool fast,
  }) => RustLib.instance.api.crateApiSchemabuilderSchemaBuilderAddUnsignedField(
    that: this,
    name: name,
    stored: stored,
    indexed: indexed,
    fast: fast,
  );

  /// Finalize the creation of a Schema.
  ///
  /// Returns a Schema object. After this is called the SchemaBuilder cannot
  /// be used anymore.
  ///
  Schema build() =>
      RustLib.instance.api.crateApiSchemabuilderSchemaBuilderBuild(that: this);
}

@sealed
class SchemaImpl extends RustOpaque implements Schema {
  // Not to be used by end users
  SchemaImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SchemaImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Schema,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Schema,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SchemaPtr,
  );
}

@sealed
class TantivyErrorImpl extends RustOpaque implements TantivyError {
  // Not to be used by end users
  TantivyErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TantivyErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_TantivyError,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_TantivyError,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_TantivyErrorPtr,
  );
}
