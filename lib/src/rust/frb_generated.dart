// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => 282129035;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'tantivy_dart',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<Searcher> crateApiSimpleIndexReaderSearcher({
    required IndexReader that,
  });

  Future<Opstamp> crateApiSimpleIndexWriterAddDocument({
    required IndexWriter that,
    required TantivyDocument document,
  });

  MyIndex crateApiSimpleMyIndexNew({
    required Schema schema,
    required String path,
  });

  IndexReader crateApiSimpleMyIndexReader({required MyIndex that});

  IndexWriter crateApiSimpleMyIndexWriter({
    required MyIndex that,
    required BigInt heapSize,
    required BigInt numThreads,
  });

  Future<void> crateApiSimpleMySchemaBuilderAddBoolField({
    required MySchemaBuilder that,
    required String name,
    required bool stored,
    required bool fast,
    required bool indexed,
  });

  Future<void> crateApiSimpleMySchemaBuilderAddFacetField({
    required MySchemaBuilder that,
    required String name,
  });

  Future<void> crateApiSimpleMySchemaBuilderAddFloatField({
    required MySchemaBuilder that,
    required String name,
    required bool stored,
    required bool fast,
    required bool indexed,
  });

  Future<void> crateApiSimpleMySchemaBuilderAddIntegerField({
    required MySchemaBuilder that,
    required String name,
    required bool stored,
    required bool fast,
    required bool indexed,
  });

  Future<void> crateApiSimpleMySchemaBuilderAddTextField({
    required MySchemaBuilder that,
    required String name,
    required bool stored,
    required IndexRecordOption indexOption,
    required String tokenizerName,
  });

  Schema crateApiSimpleMySchemaBuilderBuild({required MySchemaBuilder that});

  MySchemaBuilder crateApiSimpleMySchemaBuilderNew();

  String crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_IndexReader;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_IndexReader;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_IndexReaderPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_IndexWriter;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_IndexWriter;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_IndexWriterPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_MyIndex;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_MyIndex;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MyIndexPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_MySchemaBuilder;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_MySchemaBuilder;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_MySchemaBuilderPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Opstamp;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Opstamp;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OpstampPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Schema;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Schema;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SchemaPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Searcher;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Searcher;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SearcherPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_TantivyDocument;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_TantivyDocument;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_TantivyDocumentPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<Searcher> crateApiSimpleIndexReaderSearcher({
    required IndexReader that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexReader(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearcher,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiSimpleIndexReaderSearcherConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleIndexReaderSearcherConstMeta =>
      const TaskConstMeta(
        debugName: "IndexReader_searcher",
        argNames: ["that"],
      );

  @override
  Future<Opstamp> crateApiSimpleIndexWriterAddDocument({
    required IndexWriter that,
    required TantivyDocument document,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexWriter(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyDocument(
            document,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpstamp,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiSimpleIndexWriterAddDocumentConstMeta,
        argValues: [that, document],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleIndexWriterAddDocumentConstMeta =>
      const TaskConstMeta(
        debugName: "IndexWriter_add_document",
        argNames: ["that", "document"],
      );

  @override
  MyIndex crateApiSimpleMyIndexNew({
    required Schema schema,
    required String path,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchema(
            schema,
            serializer,
          );
          sse_encode_String(path, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyIndex,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleMyIndexNewConstMeta,
        argValues: [schema, path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleMyIndexNewConstMeta => const TaskConstMeta(
    debugName: "MyIndex_new",
    argNames: ["schema", "path"],
  );

  @override
  IndexReader crateApiSimpleMyIndexReader({required MyIndex that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyIndex(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexReader,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleMyIndexReaderConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleMyIndexReaderConstMeta =>
      const TaskConstMeta(debugName: "MyIndex_reader", argNames: ["that"]);

  @override
  IndexWriter crateApiSimpleMyIndexWriter({
    required MyIndex that,
    required BigInt heapSize,
    required BigInt numThreads,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyIndex(
            that,
            serializer,
          );
          sse_encode_usize(heapSize, serializer);
          sse_encode_usize(numThreads, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexWriter,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleMyIndexWriterConstMeta,
        argValues: [that, heapSize, numThreads],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleMyIndexWriterConstMeta =>
      const TaskConstMeta(
        debugName: "MyIndex_writer",
        argNames: ["that", "heapSize", "numThreads"],
      );

  @override
  Future<void> crateApiSimpleMySchemaBuilderAddBoolField({
    required MySchemaBuilder that,
    required String name,
    required bool stored,
    required bool fast,
    required bool indexed,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMySchemaBuilder(
            that,
            serializer,
          );
          sse_encode_String(name, serializer);
          sse_encode_bool(stored, serializer);
          sse_encode_bool(fast, serializer);
          sse_encode_bool(indexed, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleMySchemaBuilderAddBoolFieldConstMeta,
        argValues: [that, name, stored, fast, indexed],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleMySchemaBuilderAddBoolFieldConstMeta =>
      const TaskConstMeta(
        debugName: "MySchemaBuilder_add_bool_field",
        argNames: ["that", "name", "stored", "fast", "indexed"],
      );

  @override
  Future<void> crateApiSimpleMySchemaBuilderAddFacetField({
    required MySchemaBuilder that,
    required String name,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMySchemaBuilder(
            that,
            serializer,
          );
          sse_encode_String(name, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleMySchemaBuilderAddFacetFieldConstMeta,
        argValues: [that, name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleMySchemaBuilderAddFacetFieldConstMeta =>
      const TaskConstMeta(
        debugName: "MySchemaBuilder_add_facet_field",
        argNames: ["that", "name"],
      );

  @override
  Future<void> crateApiSimpleMySchemaBuilderAddFloatField({
    required MySchemaBuilder that,
    required String name,
    required bool stored,
    required bool fast,
    required bool indexed,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMySchemaBuilder(
            that,
            serializer,
          );
          sse_encode_String(name, serializer);
          sse_encode_bool(stored, serializer);
          sse_encode_bool(fast, serializer);
          sse_encode_bool(indexed, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleMySchemaBuilderAddFloatFieldConstMeta,
        argValues: [that, name, stored, fast, indexed],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleMySchemaBuilderAddFloatFieldConstMeta =>
      const TaskConstMeta(
        debugName: "MySchemaBuilder_add_float_field",
        argNames: ["that", "name", "stored", "fast", "indexed"],
      );

  @override
  Future<void> crateApiSimpleMySchemaBuilderAddIntegerField({
    required MySchemaBuilder that,
    required String name,
    required bool stored,
    required bool fast,
    required bool indexed,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMySchemaBuilder(
            that,
            serializer,
          );
          sse_encode_String(name, serializer);
          sse_encode_bool(stored, serializer);
          sse_encode_bool(fast, serializer);
          sse_encode_bool(indexed, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleMySchemaBuilderAddIntegerFieldConstMeta,
        argValues: [that, name, stored, fast, indexed],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleMySchemaBuilderAddIntegerFieldConstMeta =>
      const TaskConstMeta(
        debugName: "MySchemaBuilder_add_integer_field",
        argNames: ["that", "name", "stored", "fast", "indexed"],
      );

  @override
  Future<void> crateApiSimpleMySchemaBuilderAddTextField({
    required MySchemaBuilder that,
    required String name,
    required bool stored,
    required IndexRecordOption indexOption,
    required String tokenizerName,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMySchemaBuilder(
            that,
            serializer,
          );
          sse_encode_String(name, serializer);
          sse_encode_bool(stored, serializer);
          sse_encode_index_record_option(indexOption, serializer);
          sse_encode_String(tokenizerName, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleMySchemaBuilderAddTextFieldConstMeta,
        argValues: [that, name, stored, indexOption, tokenizerName],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleMySchemaBuilderAddTextFieldConstMeta =>
      const TaskConstMeta(
        debugName: "MySchemaBuilder_add_text_field",
        argNames: ["that", "name", "stored", "indexOption", "tokenizerName"],
      );

  @override
  Schema crateApiSimpleMySchemaBuilderBuild({required MySchemaBuilder that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMySchemaBuilder(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchema,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleMySchemaBuilderBuildConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleMySchemaBuilderBuildConstMeta =>
      const TaskConstMeta(
        debugName: "MySchemaBuilder_build",
        argNames: ["that"],
      );

  @override
  MySchemaBuilder crateApiSimpleMySchemaBuilderNew() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMySchemaBuilder,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleMySchemaBuilderNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleMySchemaBuilderNewConstMeta =>
      const TaskConstMeta(debugName: "MySchemaBuilder_new", argNames: []);

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(name, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleGreetConstMeta,
        argValues: [name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta =>
      const TaskConstMeta(debugName: "greet", argNames: ["name"]);

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_IndexReader =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexReader;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_IndexReader =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexReader;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_IndexWriter =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexWriter;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_IndexWriter =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexWriter;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_MyIndex =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyIndex;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_MyIndex =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyIndex;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_MySchemaBuilder =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMySchemaBuilder;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_MySchemaBuilder =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMySchemaBuilder;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Opstamp =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpstamp;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Opstamp =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpstamp;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Schema =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchema;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Schema =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchema;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Searcher =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearcher;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Searcher =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearcher;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_TantivyDocument =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyDocument;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_TantivyDocument =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyDocument;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  IndexReader
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexReader(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IndexReaderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  IndexWriter
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexWriter(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IndexWriterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MyIndex
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyIndex(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyIndexImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MySchemaBuilder
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMySchemaBuilder(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MySchemaBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Opstamp
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpstamp(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpstampImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Schema
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchema(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SchemaImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Searcher
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearcher(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SearcherImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TantivyDocument
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyDocument(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TantivyDocumentImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MySchemaBuilder
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMySchemaBuilder(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MySchemaBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  IndexReader
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexReader(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IndexReaderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  IndexWriter
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexWriter(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IndexWriterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MyIndex
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyIndex(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyIndexImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  IndexReader
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexReader(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IndexReaderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  IndexWriter
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexWriter(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IndexWriterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MyIndex
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyIndex(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyIndexImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MySchemaBuilder
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMySchemaBuilder(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MySchemaBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Opstamp
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpstamp(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpstampImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Schema
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchema(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SchemaImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Searcher
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearcher(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SearcherImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TantivyDocument
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyDocument(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TantivyDocumentImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  IndexRecordOption dco_decode_index_record_option(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IndexRecordOption.values[raw as int];
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  IndexReader
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexReader(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IndexReaderImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  IndexWriter
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexWriter(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IndexWriterImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MyIndex
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyIndex(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyIndexImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MySchemaBuilder
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMySchemaBuilder(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MySchemaBuilderImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Opstamp
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpstamp(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpstampImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Schema
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchema(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SchemaImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Searcher
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearcher(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SearcherImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  TantivyDocument
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyDocument(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TantivyDocumentImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MySchemaBuilder
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMySchemaBuilder(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MySchemaBuilderImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  IndexReader
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexReader(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IndexReaderImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  IndexWriter
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexWriter(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IndexWriterImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MyIndex
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyIndex(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyIndexImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  IndexReader
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexReader(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IndexReaderImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  IndexWriter
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexWriter(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IndexWriterImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MyIndex
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyIndex(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MyIndexImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MySchemaBuilder
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMySchemaBuilder(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MySchemaBuilderImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Opstamp
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpstamp(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpstampImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Schema
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchema(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SchemaImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Searcher
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearcher(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SearcherImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  TantivyDocument
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyDocument(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TantivyDocumentImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  IndexRecordOption sse_decode_index_record_option(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return IndexRecordOption.values[inner];
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexReader(
    IndexReader self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as IndexReaderImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexWriter(
    IndexWriter self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as IndexWriterImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyIndex(
    MyIndex self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MyIndexImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMySchemaBuilder(
    MySchemaBuilder self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MySchemaBuilderImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpstamp(
    Opstamp self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as OpstampImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchema(
    Schema self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SchemaImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearcher(
    Searcher self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SearcherImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyDocument(
    TantivyDocument self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as TantivyDocumentImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMySchemaBuilder(
    MySchemaBuilder self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MySchemaBuilderImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexReader(
    IndexReader self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as IndexReaderImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexWriter(
    IndexWriter self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as IndexWriterImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyIndex(
    MyIndex self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MyIndexImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexReader(
    IndexReader self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as IndexReaderImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexWriter(
    IndexWriter self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as IndexWriterImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMyIndex(
    MyIndex self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MyIndexImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMySchemaBuilder(
    MySchemaBuilder self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MySchemaBuilderImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpstamp(
    Opstamp self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as OpstampImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSchema(
    Schema self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SchemaImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearcher(
    Searcher self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SearcherImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTantivyDocument(
    TantivyDocument self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as TantivyDocumentImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_index_record_option(
    IndexRecordOption self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class IndexReaderImpl extends RustOpaque implements IndexReader {
  // Not to be used by end users
  IndexReaderImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  IndexReaderImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_IndexReader,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_IndexReader,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_IndexReaderPtr,
  );

  Future<Searcher> searcher() =>
      RustLib.instance.api.crateApiSimpleIndexReaderSearcher(that: this);
}

@sealed
class IndexWriterImpl extends RustOpaque implements IndexWriter {
  // Not to be used by end users
  IndexWriterImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  IndexWriterImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_IndexWriter,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_IndexWriter,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_IndexWriterPtr,
  );

  Future<Opstamp> addDocument({required TantivyDocument document}) => RustLib
      .instance
      .api
      .crateApiSimpleIndexWriterAddDocument(that: this, document: document);
}

@sealed
class MyIndexImpl extends RustOpaque implements MyIndex {
  // Not to be used by end users
  MyIndexImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MyIndexImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MyIndex,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MyIndex,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MyIndexPtr,
  );

  IndexReader reader() =>
      RustLib.instance.api.crateApiSimpleMyIndexReader(that: this);

  IndexWriter writer({required BigInt heapSize, required BigInt numThreads}) =>
      RustLib.instance.api.crateApiSimpleMyIndexWriter(
        that: this,
        heapSize: heapSize,
        numThreads: numThreads,
      );
}

@sealed
class MySchemaBuilderImpl extends RustOpaque implements MySchemaBuilder {
  // Not to be used by end users
  MySchemaBuilderImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MySchemaBuilderImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MySchemaBuilder,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MySchemaBuilder,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MySchemaBuilderPtr,
  );

  Future<void> addBoolField({
    required String name,
    required bool stored,
    required bool fast,
    required bool indexed,
  }) => RustLib.instance.api.crateApiSimpleMySchemaBuilderAddBoolField(
    that: this,
    name: name,
    stored: stored,
    fast: fast,
    indexed: indexed,
  );

  Future<void> addFacetField({required String name}) => RustLib.instance.api
      .crateApiSimpleMySchemaBuilderAddFacetField(that: this, name: name);

  Future<void> addFloatField({
    required String name,
    required bool stored,
    required bool fast,
    required bool indexed,
  }) => RustLib.instance.api.crateApiSimpleMySchemaBuilderAddFloatField(
    that: this,
    name: name,
    stored: stored,
    fast: fast,
    indexed: indexed,
  );

  Future<void> addIntegerField({
    required String name,
    required bool stored,
    required bool fast,
    required bool indexed,
  }) => RustLib.instance.api.crateApiSimpleMySchemaBuilderAddIntegerField(
    that: this,
    name: name,
    stored: stored,
    fast: fast,
    indexed: indexed,
  );

  Future<void> addTextField({
    required String name,
    required bool stored,
    required IndexRecordOption indexOption,
    required String tokenizerName,
  }) => RustLib.instance.api.crateApiSimpleMySchemaBuilderAddTextField(
    that: this,
    name: name,
    stored: stored,
    indexOption: indexOption,
    tokenizerName: tokenizerName,
  );

  Schema build() =>
      RustLib.instance.api.crateApiSimpleMySchemaBuilderBuild(that: this);
}

@sealed
class OpstampImpl extends RustOpaque implements Opstamp {
  // Not to be used by end users
  OpstampImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OpstampImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Opstamp,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Opstamp,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_OpstampPtr,
  );
}

@sealed
class SchemaImpl extends RustOpaque implements Schema {
  // Not to be used by end users
  SchemaImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SchemaImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Schema,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Schema,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SchemaPtr,
  );
}

@sealed
class SearcherImpl extends RustOpaque implements Searcher {
  // Not to be used by end users
  SearcherImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SearcherImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Searcher,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Searcher,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SearcherPtr,
  );
}

@sealed
class TantivyDocumentImpl extends RustOpaque implements TantivyDocument {
  // Not to be used by end users
  TantivyDocumentImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TantivyDocumentImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_TantivyDocument,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_TantivyDocument,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_TantivyDocumentPtr,
  );
}
